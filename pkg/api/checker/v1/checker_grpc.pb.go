// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: checker/v1/checker.proto

package checker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckerClient is the client API for Checker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckerClient interface {
	Check(ctx context.Context, in *ArrayTestsRequest, opts ...grpc.CallOption) (Checker_CheckClient, error)
	CheckURL(ctx context.Context, in *FileTestsRequest, opts ...grpc.CallOption) (Checker_CheckURLClient, error)
}

type checkerClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerClient(cc grpc.ClientConnInterface) CheckerClient {
	return &checkerClient{cc}
}

func (c *checkerClient) Check(ctx context.Context, in *ArrayTestsRequest, opts ...grpc.CallOption) (Checker_CheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &Checker_ServiceDesc.Streams[0], "/checker.Checker/Check", opts...)
	if err != nil {
		return nil, err
	}
	x := &checkerCheckClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Checker_CheckClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type checkerCheckClient struct {
	grpc.ClientStream
}

func (x *checkerCheckClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *checkerClient) CheckURL(ctx context.Context, in *FileTestsRequest, opts ...grpc.CallOption) (Checker_CheckURLClient, error) {
	stream, err := c.cc.NewStream(ctx, &Checker_ServiceDesc.Streams[1], "/checker.Checker/CheckURL", opts...)
	if err != nil {
		return nil, err
	}
	x := &checkerCheckURLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Checker_CheckURLClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type checkerCheckURLClient struct {
	grpc.ClientStream
}

func (x *checkerCheckURLClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CheckerServer is the server API for Checker service.
// All implementations must embed UnimplementedCheckerServer
// for forward compatibility
type CheckerServer interface {
	Check(*ArrayTestsRequest, Checker_CheckServer) error
	CheckURL(*FileTestsRequest, Checker_CheckURLServer) error
	mustEmbedUnimplementedCheckerServer()
}

// UnimplementedCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedCheckerServer struct {
}

func (UnimplementedCheckerServer) Check(*ArrayTestsRequest, Checker_CheckServer) error {
	return status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedCheckerServer) CheckURL(*FileTestsRequest, Checker_CheckURLServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckURL not implemented")
}
func (UnimplementedCheckerServer) mustEmbedUnimplementedCheckerServer() {}

// UnsafeCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerServer will
// result in compilation errors.
type UnsafeCheckerServer interface {
	mustEmbedUnimplementedCheckerServer()
}

func RegisterCheckerServer(s grpc.ServiceRegistrar, srv CheckerServer) {
	s.RegisterService(&Checker_ServiceDesc, srv)
}

func _Checker_Check_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArrayTestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CheckerServer).Check(m, &checkerCheckServer{stream})
}

type Checker_CheckServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type checkerCheckServer struct {
	grpc.ServerStream
}

func (x *checkerCheckServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Checker_CheckURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileTestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CheckerServer).CheckURL(m, &checkerCheckURLServer{stream})
}

type Checker_CheckURLServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type checkerCheckURLServer struct {
	grpc.ServerStream
}

func (x *checkerCheckURLServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Checker_ServiceDesc is the grpc.ServiceDesc for Checker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checker.Checker",
	HandlerType: (*CheckerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Check",
			Handler:       _Checker_Check_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CheckURL",
			Handler:       _Checker_CheckURL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "checker/v1/checker.proto",
}
