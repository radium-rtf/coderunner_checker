// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checker/v1/checker.proto

package checker

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestRequestMultiError, or
// nil if none found.
func (m *TestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _TestRequest_Lang_InLookup[m.GetLang()]; !ok {
		err := TestRequestValidationError{
			field:  "Lang",
			reason: "value must be in list [python]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := TestRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := TestRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetTimeout(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = TestRequestValidationError{
				field:  "Timeout",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(30*time.Second + 0*time.Nanosecond)
			gte := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := TestRequestValidationError{
					field:  "Timeout",
					reason: "value must be inside range [0s, 30s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if val := m.GetMemoryLimitBytes(); val < 6291456 || val > 268435456 {
		err := TestRequestValidationError{
			field:  "MemoryLimitBytes",
			reason: "value must be inside range [6291456, 268435456]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FullInfoWa

	if len(errors) > 0 {
		return TestRequestMultiError(errors)
	}

	return nil
}

// TestRequestMultiError is an error wrapping multiple validation errors
// returned by TestRequest.ValidateAll() if the designated constraints aren't met.
type TestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestRequestMultiError) AllErrors() []error { return m }

// TestRequestValidationError is the validation error returned by
// TestRequest.Validate if the designated constraints aren't met.
type TestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRequestValidationError) ErrorName() string { return "TestRequestValidationError" }

// Error satisfies the builtin error interface
func (e TestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRequestValidationError{}

var _TestRequest_Lang_InLookup = map[string]struct{}{
	"python": {},
}

// Validate checks the field values on ArrayTestsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ArrayTestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArrayTestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArrayTestsRequestMultiError, or nil if none found.
func (m *ArrayTestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArrayTestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTests()) < 1 {
		err := ArrayTestsRequestValidationError{
			field:  "Tests",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArrayTestsRequestValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArrayTestsRequestValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArrayTestsRequestValidationError{
					field:  fmt.Sprintf("Tests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetRequest() == nil {
		err := ArrayTestsRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArrayTestsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArrayTestsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArrayTestsRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArrayTestsRequestMultiError(errors)
	}

	return nil
}

// ArrayTestsRequestMultiError is an error wrapping multiple validation errors
// returned by ArrayTestsRequest.ValidateAll() if the designated constraints
// aren't met.
type ArrayTestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArrayTestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArrayTestsRequestMultiError) AllErrors() []error { return m }

// ArrayTestsRequestValidationError is the validation error returned by
// ArrayTestsRequest.Validate if the designated constraints aren't met.
type ArrayTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArrayTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArrayTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArrayTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArrayTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArrayTestsRequestValidationError) ErrorName() string {
	return "ArrayTestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArrayTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArrayTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArrayTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArrayTestsRequestValidationError{}

// Validate checks the field values on FileTestsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileTestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileTestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileTestsRequestMultiError, or nil if none found.
func (m *FileTestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileTestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = FileTestsRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := FileTestsRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRequest() == nil {
		err := FileTestsRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileTestsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileTestsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileTestsRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileTestsRequestMultiError(errors)
	}

	return nil
}

// FileTestsRequestMultiError is an error wrapping multiple validation errors
// returned by FileTestsRequest.ValidateAll() if the designated constraints
// aren't met.
type FileTestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileTestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileTestsRequestMultiError) AllErrors() []error { return m }

// FileTestsRequestValidationError is the validation error returned by
// FileTestsRequest.Validate if the designated constraints aren't met.
type FileTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTestsRequestValidationError) ErrorName() string { return "FileTestsRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTestsRequestValidationError{}

// Validate checks the field values on TestResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestResponseMultiError, or
// nil if none found.
func (m *TestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Status_name[int32(m.GetStatus())]; !ok {
		err := TestResponseValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNumber() < 1 {
		err := TestResponseValidationError{
			field:  "Number",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() == nil {
		err := TestResponseValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofMessagePresent := false
	switch v := m.Message.(type) {
	case *TestResponse_Text:
		if v == nil {
			err := TestResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMessagePresent = true
		// no validation rules for Text
	case *TestResponse_WrongAnswer_:
		if v == nil {
			err := TestResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMessagePresent = true

		if all {
			switch v := interface{}(m.GetWrongAnswer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestResponseValidationError{
						field:  "WrongAnswer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestResponseValidationError{
						field:  "WrongAnswer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWrongAnswer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestResponseValidationError{
					field:  "WrongAnswer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofMessagePresent {
		err := TestResponseValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TestResponseMultiError(errors)
	}

	return nil
}

// TestResponseMultiError is an error wrapping multiple validation errors
// returned by TestResponse.ValidateAll() if the designated constraints aren't met.
type TestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestResponseMultiError) AllErrors() []error { return m }

// TestResponseValidationError is the validation error returned by
// TestResponse.Validate if the designated constraints aren't met.
type TestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestResponseValidationError) ErrorName() string { return "TestResponseValidationError" }

// Error satisfies the builtin error interface
func (e TestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestResponseValidationError{}

// Validate checks the field values on ArrayTestsRequest_TestCase with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArrayTestsRequest_TestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArrayTestsRequest_TestCase with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArrayTestsRequest_TestCaseMultiError, or nil if none found.
func (m *ArrayTestsRequest_TestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *ArrayTestsRequest_TestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stdin

	// no validation rules for Stdout

	if len(errors) > 0 {
		return ArrayTestsRequest_TestCaseMultiError(errors)
	}

	return nil
}

// ArrayTestsRequest_TestCaseMultiError is an error wrapping multiple
// validation errors returned by ArrayTestsRequest_TestCase.ValidateAll() if
// the designated constraints aren't met.
type ArrayTestsRequest_TestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArrayTestsRequest_TestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArrayTestsRequest_TestCaseMultiError) AllErrors() []error { return m }

// ArrayTestsRequest_TestCaseValidationError is the validation error returned
// by ArrayTestsRequest_TestCase.Validate if the designated constraints aren't met.
type ArrayTestsRequest_TestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArrayTestsRequest_TestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArrayTestsRequest_TestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArrayTestsRequest_TestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArrayTestsRequest_TestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArrayTestsRequest_TestCaseValidationError) ErrorName() string {
	return "ArrayTestsRequest_TestCaseValidationError"
}

// Error satisfies the builtin error interface
func (e ArrayTestsRequest_TestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArrayTestsRequest_TestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArrayTestsRequest_TestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArrayTestsRequest_TestCaseValidationError{}

// Validate checks the field values on TestResponse_WrongAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestResponse_WrongAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestResponse_WrongAnswer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestResponse_WrongAnswerMultiError, or nil if none found.
func (m *TestResponse_WrongAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *TestResponse_WrongAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Input

	// no validation rules for Actual

	// no validation rules for Expected

	if len(errors) > 0 {
		return TestResponse_WrongAnswerMultiError(errors)
	}

	return nil
}

// TestResponse_WrongAnswerMultiError is an error wrapping multiple validation
// errors returned by TestResponse_WrongAnswer.ValidateAll() if the designated
// constraints aren't met.
type TestResponse_WrongAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestResponse_WrongAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestResponse_WrongAnswerMultiError) AllErrors() []error { return m }

// TestResponse_WrongAnswerValidationError is the validation error returned by
// TestResponse_WrongAnswer.Validate if the designated constraints aren't met.
type TestResponse_WrongAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestResponse_WrongAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestResponse_WrongAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestResponse_WrongAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestResponse_WrongAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestResponse_WrongAnswerValidationError) ErrorName() string {
	return "TestResponse_WrongAnswerValidationError"
}

// Error satisfies the builtin error interface
func (e TestResponse_WrongAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestResponse_WrongAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestResponse_WrongAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestResponse_WrongAnswerValidationError{}
